
package org.soaplab.morphosintactic_tagging.freeling3_tagging;

import java.util.List;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Holder;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;
import org.soaplab.typedws.JobId;
import org.soaplab.typedws.ResultInfo;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.9-b130926.1035
 * Generated source version: 2.2
 * 
 */
@WebService(name = "freeling3_tagging", targetNamespace = "http://soaplab.org/morphosintactic_tagging/freeling3_tagging")
@XmlSeeAlso({
    org.emboss.common.ObjectFactory.class,
    org.soaplab.freeling3_tagging.ObjectFactory.class,
    org.soaplab.typedws.ObjectFactory.class
})
public interface Freeling3Tagging {


    /**
     * starts a job and returns its job identifier
     * 
     * @param noquant
     * @param bio
     * @param nonec
     * @param nopunt
     * @param language
     * @param inputUrl
     * @param inputDirectData
     * @param nodate
     * @param noafx
     * @param keeptags
     * @param noprob
     * @param xmlcqp
     * @param flush
     * @param nodict
     * @param noner
     * @param nonumb
     * @param noloc
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "run")
    @WebResult(name = "jobId", targetNamespace = "")
    @RequestWrapper(localName = "run", targetNamespace = "http://soaplab.org/freeling3_tagging", className = "org.soaplab.freeling3_tagging.AppInputs")
    @ResponseWrapper(localName = "runResponse", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.RunResponse")
    public String run(
        @WebParam(name = "input_direct_data", targetNamespace = "")
        String inputDirectData,
        @WebParam(name = "input_url", targetNamespace = "")
        String inputUrl,
        @WebParam(name = "language", targetNamespace = "")
        String language,
        @WebParam(name = "keeptags", targetNamespace = "")
        Boolean keeptags,
        @WebParam(name = "noner", targetNamespace = "")
        Boolean noner,
        @WebParam(name = "bio", targetNamespace = "")
        Boolean bio,
        @WebParam(name = "nonec", targetNamespace = "")
        Boolean nonec,
        @WebParam(name = "flush", targetNamespace = "")
        Boolean flush,
        @WebParam(name = "noafx", targetNamespace = "")
        Boolean noafx,
        @WebParam(name = "noloc", targetNamespace = "")
        Boolean noloc,
        @WebParam(name = "nonumb", targetNamespace = "")
        Boolean nonumb,
        @WebParam(name = "nopunt", targetNamespace = "")
        Boolean nopunt,
        @WebParam(name = "nodate", targetNamespace = "")
        Boolean nodate,
        @WebParam(name = "noquant", targetNamespace = "")
        Boolean noquant,
        @WebParam(name = "nodict", targetNamespace = "")
        Boolean nodict,
        @WebParam(name = "noprob", targetNamespace = "")
        Boolean noprob,
        @WebParam(name = "xmlcqp", targetNamespace = "")
        Boolean xmlcqp);

    /**
     * starts a job, waits until it is completed and
     * 				returns the job results
     * 
     * @param outputUrl
     * @param noquant
     * @param bio
     * @param nonec
     * @param nopunt
     * @param language
     * @param inputUrl
     * @param inputDirectData
     * @param nodate
     * @param noafx
     * @param output
     * @param keeptags
     * @param noprob
     * @param xmlcqp
     * @param detailedStatus
     * @param flush
     * @param nodict
     * @param noner
     * @param nonumb
     * @param report
     * @param noloc
     */
    @WebMethod(action = "runAndWaitFor")
    @RequestWrapper(localName = "runAndWaitFor", targetNamespace = "http://soaplab.org/freeling3_tagging", className = "org.soaplab.freeling3_tagging.RunAndWaitFor")
    @ResponseWrapper(localName = "runAndWaitForResponse", targetNamespace = "http://soaplab.org/freeling3_tagging", className = "org.soaplab.freeling3_tagging.RunAndWaitForResponse")
    public void runAndWaitFor(
        @WebParam(name = "input_direct_data", targetNamespace = "")
        String inputDirectData,
        @WebParam(name = "input_url", targetNamespace = "")
        String inputUrl,
        @WebParam(name = "language", targetNamespace = "")
        String language,
        @WebParam(name = "keeptags", targetNamespace = "")
        Boolean keeptags,
        @WebParam(name = "noner", targetNamespace = "")
        Boolean noner,
        @WebParam(name = "bio", targetNamespace = "")
        Boolean bio,
        @WebParam(name = "nonec", targetNamespace = "")
        Boolean nonec,
        @WebParam(name = "flush", targetNamespace = "")
        Boolean flush,
        @WebParam(name = "noafx", targetNamespace = "")
        Boolean noafx,
        @WebParam(name = "noloc", targetNamespace = "")
        Boolean noloc,
        @WebParam(name = "nonumb", targetNamespace = "")
        Boolean nonumb,
        @WebParam(name = "nopunt", targetNamespace = "")
        Boolean nopunt,
        @WebParam(name = "nodate", targetNamespace = "")
        Boolean nodate,
        @WebParam(name = "noquant", targetNamespace = "")
        Boolean noquant,
        @WebParam(name = "nodict", targetNamespace = "")
        Boolean nodict,
        @WebParam(name = "noprob", targetNamespace = "")
        Boolean noprob,
        @WebParam(name = "xmlcqp", targetNamespace = "")
        Boolean xmlcqp,
        @WebParam(name = "report", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> report,
        @WebParam(name = "detailed_status", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<Long> detailedStatus,
        @WebParam(name = "output", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> output,
        @WebParam(name = "output_url", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> outputUrl);

    /**
     * returns status of a given job
     * 
     * @param jobId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "getStatus")
    @WebResult(name = "jobStatus", targetNamespace = "")
    @RequestWrapper(localName = "getStatus", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.GetStatusRequest")
    @ResponseWrapper(localName = "getStatusResponse", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.JobStatus")
    public String getStatus(
        @WebParam(name = "jobId", targetNamespace = "")
        JobId jobId);

    /**
     * terminates the specified job
     * 
     * @param jobId
     */
    @WebMethod(action = "terminate")
    @Oneway
    @RequestWrapper(localName = "terminate", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.TerminateRequest")
    public void terminate(
        @WebParam(name = "jobId", targetNamespace = "")
        JobId jobId);

    /**
     * informs server that resources for the specified job can be cleared
     * 
     * @param jobId
     */
    @WebMethod(action = "clear")
    @Oneway
    @RequestWrapper(localName = "clear", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.ClearRequest")
    public void clear(
        @WebParam(name = "jobId", targetNamespace = "")
        JobId jobId);

    /**
     * waits until the specified job terminates
     * 
     * @param jobId
     */
    @WebMethod(action = "waitfor")
    @Oneway
    @RequestWrapper(localName = "waitfor", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.WaitforRequest")
    public void waitfor(
        @WebParam(name = "jobId", targetNamespace = "")
        JobId jobId);

    /**
     * returns all results of a given job
     * 
     * @param output
     * @param outputUrl
     * @param jobId
     * @param detailedStatus
     * @param report
     */
    @WebMethod(action = "getResults")
    @RequestWrapper(localName = "getResults", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.GetResultsRequest")
    @ResponseWrapper(localName = "getResultsResponse", targetNamespace = "http://soaplab.org/freeling3_tagging", className = "org.soaplab.freeling3_tagging.AppResults")
    public void getResults(
        @WebParam(name = "jobId", targetNamespace = "")
        JobId jobId,
        @WebParam(name = "report", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> report,
        @WebParam(name = "detailed_status", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<Long> detailedStatus,
        @WebParam(name = "output", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> output,
        @WebParam(name = "output_url", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> outputUrl);

    /**
     * returns all results of a given job
     * 
     * @param output
     * @param outputUrl
     * @param jobId
     * @param detailedStatus
     * @param report
     * @param resultName
     */
    @WebMethod(action = "getSomeResults")
    @RequestWrapper(localName = "getSomeResults", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.GetSomeResultsRequest")
    @ResponseWrapper(localName = "getSomeResultsResponse", targetNamespace = "http://soaplab.org/freeling3_tagging", className = "org.soaplab.freeling3_tagging.AppResults")
    public void getSomeResults(
        @WebParam(name = "jobId", targetNamespace = "")
        JobId jobId,
        @WebParam(name = "resultName", targetNamespace = "")
        List<String> resultName,
        @WebParam(name = "report", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> report,
        @WebParam(name = "detailed_status", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<Long> detailedStatus,
        @WebParam(name = "output", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> output,
        @WebParam(name = "output_url", targetNamespace = "", mode = WebParam.Mode.OUT)
        Holder<String> outputUrl);

    /**
     * returns a structured description of the service, in xml
     * 
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "describe")
    @WebResult(name = "description", targetNamespace = "")
    @RequestWrapper(localName = "describe", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.DescribeRequest")
    @ResponseWrapper(localName = "describeResponse", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.DescribeResponse")
    public String describe();

    /**
     * 
     * @param jobId
     * @return
     *     returns java.lang.String
     */
    @WebMethod(action = "getLastEvent")
    @WebResult(name = "event", targetNamespace = "")
    @RequestWrapper(localName = "getLastEvent", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.GetLastEventRequest")
    @ResponseWrapper(localName = "getLastEventResponse", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.GetLastEventResponse")
    public String getLastEvent(
        @WebParam(name = "jobId", targetNamespace = "")
        JobId jobId);

    /**
     * 
     * @param jobId
     * @return
     *     returns java.util.List<org.soaplab.typedws.ResultInfo>
     */
    @WebMethod(action = "getResultsInfo")
    @WebResult(name = "resultsInfoList", targetNamespace = "")
    @RequestWrapper(localName = "getResultsInfo", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.GetResultsInfoRequest")
    @ResponseWrapper(localName = "getResultsInfoResponse", targetNamespace = "http://soaplab.org/typedws", className = "org.soaplab.typedws.GetResultsInfoResponse")
    public List<ResultInfo> getResultsInfo(
        @WebParam(name = "jobId", targetNamespace = "")
        JobId jobId);

}
